#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ PDF —Ñ–∞–π–ª–∞
==================================
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º PDF
"""

import os
import shutil
import subprocess
import json
from pathlib import Path

def test_pdf_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–≥–æ PDF"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ù–û–í–û–ì–û PDF")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    uploaded_pdf = "uploads/20250904_130609_LocTracker_Field_Service_Integration_REST_v1.0.34_1.pdf"
    
    if not os.path.exists(uploaded_pdf):
        print("‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF: {os.path.basename(uploaded_pdf)}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {os.path.getsize(uploaded_pdf)} bytes")
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –∫–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π PDF
    print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
    cache_files = ['extracted_text.txt', 'ultimate_final_data']
    for cache_file in cache_files:
        if os.path.exists(cache_file):
            if os.path.isfile(cache_file):
                os.remove(cache_file)
                print(f"   –£–¥–∞–ª–µ–Ω: {cache_file}")
            elif os.path.isdir(cache_file):
                shutil.rmtree(cache_file)
                print(f"   –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {cache_file}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π PDF
    print(f"\nüìÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ PDF...")
    shutil.copy2(uploaded_pdf, 'documentation.pdf')
    print(f"   –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {uploaded_pdf} -> documentation.pdf")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    result = subprocess.run(
        ['python3', 'fleethand_ultimate_parser.py'],
        capture_output=True,
        text=True,
        timeout=300
    )
    
    if result.returncode == 0:
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_dir = Path('ultimate_final_data')
        if results_dir.exists():
            quality_file = results_dir / 'quality_report_ultimate_final.json'
            if quality_file.exists():
                with open(quality_file, 'r') as f:
                    quality_data = json.load(f)
                
                stats = quality_data['statistics']
                metrics = quality_data['quality_metrics']
                
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
                print(f"   Endpoints: {stats['endpoints']}")
                print(f"   Headers: {stats['headers']}")
                print(f"   Parameters: {stats['parameters']}")
                print(f"   Responses: {stats['responses']}")
                print(f"   MCP –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {metrics['mcp_readiness_score']}")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {metrics['professional_quality']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                gen_time = quality_data['generation_time']
                print(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_time}")
                
                return True
            else:
                print("‚ùå –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            print("‚ùå –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:")
        print(f"   stdout: {result.stdout}")
        print(f"   stderr: {result.stderr}")
    
    return False

if __name__ == "__main__":
    success = test_pdf_processing()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ù–æ–≤—ã–π PDF –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞.")